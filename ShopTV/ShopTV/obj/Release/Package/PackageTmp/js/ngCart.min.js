"use strict"; angular.module("ngCart", ["ngCart.directives"]).config([function () { }]).provider("$ngCart", function () { this.$get = function () { } }).run(["$rootScope", "ngCart", "ngCartItem", "store", function (t, e, i, n) { t.$on("ngCart:change", function () { e.$save() }), angular.isObject(n.get("cart")) ? e.$restore(n.get("cart")) : e.init() }]).service("ngCart", ["$rootScope", "ngCartItem", "store", "Notification", function (t, e, i, n) { this.init = function () { this.$cart = { shipping: null, taxRate: null, tax: null, items: [] } }, this.addItem = function (i, r, o, a, s, c, u, g, h) { var l = this.getItemById(i); if ("object" == typeof l) n.warning({ message: "<i class='fa fa-plus'></i>&nbsp; Đã cập nhập số lượng", positionY: "top", positionX: "right" }), l.setQuantity(g, !0); else { var m = new e(i, r, o, a, s, c, u, g, h); this.$cart.items.push(m), t.$broadcast("ngCart:itemAdded", m), n.success({ message: "<i class='fa fa-check'></i>&nbsp; Đã thêm vào giỏ hàng", positionY: "top", positionX: "right" }) } t.$broadcast("ngCart:change", {}) }, this.getItemById = function (t) { var e = this.getCart().items, i = !1; return angular.forEach(e, function (e) { e.getId() === t && (i = e) }), i }, this.setShipping = function (t) { return this.$cart.shipping = t, this.getShipping() }, this.getShipping = function () { return 0 == this.getCart().items.length ? 0 : this.getCart().shipping }, this.setTaxRate = function (t) { return this.$cart.taxRate = +parseFloat(t).toFixed(2), this.getTaxRate() }, this.getTaxRate = function () { return this.$cart.taxRate }, this.getTax = function () { return +parseFloat(this.getSubTotal() / 100 * this.getCart().taxRate).toFixed(2) }, this.setCart = function (t) { return this.$cart = t, this.getCart() }, this.getCart = function () { return this.$cart }, this.getItems = function () { return this.getCart().items }, this.getTotalItems = function () { var t = 0, e = this.getItems(); return angular.forEach(e, function (e) { t += e.getQuantity() }), t }, this.getTotalUniqueItems = function () { return this.getCart().items.length }, this.getSubTotal = function () { var t = 0; return angular.forEach(this.getCart().items, function (e) { t += e.getTotal() }), +parseFloat(t).toFixed(2) }, this.totalCost = function () { return +parseFloat(this.getSubTotal() + this.getShipping() + this.getTax()).toFixed(2) }, this.removeItem = function (e) { this.$cart.items.splice(e, 1), t.$broadcast("ngCart:itemRemoved", {}), t.$broadcast("ngCart:change", {}) }, this.removeItemById = function (e) { var i = this.getCart(); angular.forEach(i.items, function (t, n) { t.getId() === e && i.items.splice(n, 1) }), this.setCart(i), t.$broadcast("ngCart:itemRemoved", {}), t.$broadcast("ngCart:change", {}), n.error({ message: "<i class='fa fa-times'></i>&nbsp; Đã xóa khỏi giỏ hàng", positionY: "top", positionX: "right" }) }, this.empty = function () { t.$broadcast("ngCart:change", {}), this.$cart.items = [], localStorage.removeItem("cart") }, this.toObject = function () { if (0 === this.getItems().length) return !1; var t = []; return angular.forEach(this.getItems(), function (e) { t.push(e.toObject()) }), { shipping: this.getShipping(), tax: this.getTax(), taxRate: this.getTaxRate(), subTotal: this.getSubTotal(), totalCost: this.totalCost(), items: t } }, this.$restore = function (t) { var i = this; i.init(), i.$cart.shipping = t.shipping, i.$cart.tax = t.tax, angular.forEach(t.items, function (t) { i.$cart.items.push(new e(t._id, t._name, t._nameseo, t._img, t._imgname, t._price, t._seles, t._quantity, t._data)) }), this.$save() }, this.$save = function () { return i.set("cart", JSON.stringify(this.getCart())) } }]).factory("ngCartItem", ["$rootScope", "$log", function (t, e) { var i = function (t, e, i, n, r, o, a, s, c) { this.setId(t), this.setName(e), this.setNameseo(i), this.setImg(n), this.setImgname(r), this.setPrice(o), this.setSeles(a), this.setQuantity(s), this.setData(c) }; return i.prototype.setId = function (t) { t ? this._id = t : e.error("An ID must be provided") }, i.prototype.getId = function () { return this._id }, i.prototype.setName = function (t) { t ? this._name = t : e.error("A name must be provided") }, i.prototype.getName = function () { return this._name }, i.prototype.setNameseo = function (t) { t ? this._nameseo = t : e.error("A nameseo must be provided") }, i.prototype.getNameseo = function () { return this._nameseo }, i.prototype.setImg = function (t) { t ? this._img = t : e.error("A img must be provided") }, i.prototype.getImg = function () { return this._img }, i.prototype.setImgname = function (t) { t ? this._imgname = t : e.error("A img must be provided") }, i.prototype.getImgname = function () { return this._imgname }, i.prototype.setPrice = function (t) { var i = parseFloat(t); i ? 0 >= i ? e.error("A price must be over 0") : this._price = i : this._price = 0 }, i.prototype.getPrice = function () { return this._price }, i.prototype.setSeles = function (t) { t ? this._seles = t : e.error("A seles must be provided") }, i.prototype.getSeles = function () { return this._seles }, i.prototype.setQuantity = function (i, n) { var r = parseInt(i); r % 1 === 0 ? (n === !0 ? this._quantity += r : this._quantity = r, this._quantity < 1 && (this._quantity = 1)) : (this._quantity = 1, e.info("Quantity must be an integer and was defaulted to 1")), t.$broadcast("ngCart:change", {}) }, i.prototype.getQuantity = function () { return this._quantity }, i.prototype.setData = function (t) { t && (this._data = t) }, i.prototype.getData = function () { return this._data ? this._data : void e.info("This item has no data") }, i.prototype.getTotal = function () { return +parseFloat(this.getQuantity() * this.getPrice()).toFixed(2) }, i.prototype.toObject = function () { return { id: this.getId(), name: this.getName(), nameseo: this.getNameseo(), img: this.getImg(), imgname: this.getImgname(), price: this.getPrice(), seles: this.getSeles(), quantity: this.getQuantity(), data: this.getData(), total: this.getTotal() } }, i }]).service("store", ["$window", function (t) { return { get: function (e) { if (t.localStorage[e]) { var i = angular.fromJson(t.localStorage[e]); return JSON.parse(i) } return !1 }, set: function (e, i) { return void 0 === i ? t.localStorage.removeItem(e) : t.localStorage[e] = angular.toJson(i), t.localStorage[e] } } }]).controller("CartController", ["$scope", "ngCart", function (t, e) { t.ngCart = e }]).value("version", "0.0.3-rc.1"), angular.module("ngCart.directives", ["ngCart.fulfilment"]).controller("CartController", ["$scope", "ngCart", function (t, e) { t.ngCart = e }]).directive("ngcartAddtocart", ["ngCart", function (t) { return { restrict: "E", controller: "CartController", scope: { id: "@", name: "@", nameseo: "@", img: "@", imgname: "@", quantity: "@", quantityMax: "@", price: "@", seles: "@", data: "=" }, transclude: !0, templateUrl: "template/ngCart/addtocart.html", link: function (e, i, n) { e.attrs = n, e.inCart = function () { return t.getItemById(n.id) }, e.inCart() ? e.q = t.getItemById(n.id).getQuantity() : e.q = parseInt(e.quantity) } } }]).directive("ngcartCart", [function () { return { restrict: "E", controller: "CartController", scope: {}, templateUrl: "template/ngCart/cart.html", link: function (t, e, i) { } } }]).directive("ngcartSummary", [function () { return { restrict: "E", controller: "CartController", scope: {}, transclude: !0, templateUrl: "template/ngCart/summary.html" } }]).directive("ngcartSumcheckout", [function () { return { restrict: "E", controller: "CartController", scope: {}, transclude: !0, templateUrl: "template/ngCart/sumcheckout.html" } }]).directive("ngcartCheckout", [function () { return { restrict: "E", controller: ["$scope", "ngCart", "fulfilmentProvider", function (t, e, i) { t.ngCart = e, t.checkout = function () { i.setService(t.service), i.setSettings(t.settings); var e = i.checkout(); console.log(e) } }], scope: { service: "@", settings: "=" }, transclude: !0, templateUrl: "template/ngCart/checkout.html" } }]), angular.module("ngCart.fulfilment", []).service("fulfilmentProvider", ["$injector", function (t) { this._obj = { service: void 0, settings: void 0 }, this.setService = function (t) { this._obj.service = t }, this.setSettings = function (t) { this._obj.settings = t }, this.checkout = function () { var e = t.get("ngCart.fulfilment." + this._obj.service); return e.checkout(this._obj.settings) } }]).service("ngCart.fulfilment.log", ["$q", "$log", "ngCart", function (t, e, i) { this.checkout = function () { var n = t.defer(); return e.info(i.toObject()), n.resolve({ cart: i.toObject() }), n.promise } }]).service("ngCart.fulfilment.http", ["$http", "ngCart", function (t, e) { this.checkout = function (i) { return t.post(i.url, { data: e.toObject() }) } }]).service("ngCart.fulfilment.paypal", ["$http", "ngCart", function (t, e) { }]);
//